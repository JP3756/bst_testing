@page "/"
@using bst_frontend.Services

@inject BstApiService ApiService

<PageTitle>Binary Search Tree Builder</PageTitle>

<div class="container mt-4">
    <h1>Binary Search Tree Builder and Analyzer</h1>

    <div class="row">
        <div class="col-md-6">
            <h3>Insert Value</h3>
            <div class="mb-3">
                <input type="text" class="form-control" @bind="numberInput" placeholder="Enter a number" />
            </div>
            <div class="d-flex gap-2">
                <button class="btn btn-primary" @onclick="InsertValue" disabled="@isInserting">
                @if (isInserting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    @:Inserting...
                }
                else
                {
                    @:Insert
                }
                </button>
                <button class="btn btn-warning" @onclick="RestartTree">Restart</button>
            </div>
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="mt-3 alert @alertClass">@message</div>
            }

            <h4 class="mt-4">Tree Traversals</h4>
            <div class="mb-3 traversal-buttons">
                <button class="btn btn-outline-primary" @onclick="GetInorder">Inorder</button>
                <button class="btn btn-outline-primary" @onclick="GetPreorder">Preorder</button>
                <button class="btn btn-outline-primary" @onclick="GetPostorder">Postorder</button>
                <button class="btn btn-outline-primary" @onclick="GetLevelOrder">Level Order</button>
            </div>
            @if (!string.IsNullOrEmpty(traversalResult))
            {
                <div class="mt-3 traversal-result">
                    <h5>Traversal Result</h5>
                    <p>@traversalResult</p>
                </div>
            }

            <h4 class="mt-4">Tree Analytics</h4>
            <div class="row tree-analytics">
                <div class="col-sm-6 col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Minimum</h6>
                            <p class="card-text">@((minValue.HasValue) ? minValue.Value.ToString() : "-")</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Maximum</h6>
                            <p class="card-text">@((maxValue.HasValue) ? maxValue.Value.ToString() : "-")</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Total Nodes</h6>
                            <p class="card-text">@totalNodes</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Leaf Nodes</h6>
                            <p class="card-text">@leafNodes</p>
                        </div>
                    </div>
                </div>
                <div class="col-sm-6 col-md-4 mb-3">
                    <div class="card">
                        <div class="card-body">
                            <h6 class="card-title">Tree Height</h6>
                            <p class="card-text">@treeHeight</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <TreeVisualizer Root="treeData" />
        </div>

    </div>
</div>

@code {
    private string numberInput = "";
    private BstNodeModel? treeData = null;
    private string message = "";
    private string alertClass = "";
    private bool isInserting = false;
    private string traversalResult = "";
    private int? minValue = null;
    private int? maxValue = null;
    private int totalNodes = 0;
    private int leafNodes = 0;
    private int treeHeight = 0;

    private async Task InsertValue()
    {
        if (int.TryParse(numberInput, out int value))
        {
            isInserting = true;
            message = "";
            try
            {
                await ApiService.Insert(value);
                treeData = await ApiService.GetTreeAsync();
                await LoadAnalytics();
                message = $"Successfully inserted {value}.";
                alertClass = "alert-success";
                numberInput = "";
            }
            catch (Exception ex)
            {
                message = $"Error inserting {value}: {ex.Message}";
                alertClass = "alert-danger";
            }
            finally
            {
                isInserting = false;
            }
        }
        else
        {
            message = "Please enter a valid integer.";
            alertClass = "alert-warning";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            treeData = await ApiService.GetTreeAsync();
            await LoadAnalytics();
        }
        catch
        {
            // Ignore errors on initial load
        }
    }

    private async Task GetInorder()
    {
        try
        {
            traversalResult = await ApiService.GetInorderTraversal();
        }
        catch (Exception ex)
        {
            traversalResult = $"Error: {ex.Message}";
        }
    }

    private async Task GetPreorder()
    {
        try
        {
            traversalResult = await ApiService.GetPreorderTraversal();
        }
        catch (Exception ex)
        {
            traversalResult = $"Error: {ex.Message}";
        }
    }

    private async Task GetPostorder()
    {
        try
        {
            traversalResult = await ApiService.GetPostorderTraversal();
        }
        catch (Exception ex)
        {   
            traversalResult = $"Error: {ex.Message}";
        }
    }

    private async Task GetLevelOrder()
    {
        try
        {
            traversalResult = await ApiService.GetLevelOrderTraversal();
        }
        catch (Exception ex)
        {
            traversalResult = $"Error: {ex.Message}";
        }
    }

    private async Task LoadAnalytics()
    {
        try
        {
            minValue = await ApiService.GetMinimum();
            maxValue = await ApiService.GetMaximum();
            totalNodes = await ApiService.GetTotalNodes();
            leafNodes = await ApiService.GetLeafNodes();
            treeHeight = await ApiService.GetTreeHeight();
        }
        catch
        {
            // Ignore errors for analytics
        }
    }

    private async Task RestartTree()
    {
        try
        {
            await ApiService.Reset();
            treeData = await ApiService.GetTreeAsync();
            await LoadAnalytics();
            message = "Tree restarted.";
            alertClass = "alert-info";
        }
        catch (Exception ex)
        {
            message = $"Error restarting tree: {ex.Message}";
            alertClass = "alert-danger";
        }
    }
}
